//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Controls/MenuControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MenuControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MenuControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MenuControls"",
    ""maps"": [
        {
            ""name"": ""mainMenuControls"",
            ""id"": ""8a28ea7c-8c0b-43ca-af7a-010a2d86284d"",
            ""actions"": [
                {
                    ""name"": ""NavUp"",
                    ""type"": ""Button"",
                    ""id"": ""f240d83f-5d0d-4296-8656-9838c12ad4fe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavDown"",
                    ""type"": ""Button"",
                    ""id"": ""9a67fb01-88e4-4833-a7e6-a7f1ab8f934c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavLeft"",
                    ""type"": ""Button"",
                    ""id"": ""8865a73a-8241-40c8-9455-67a143b93980"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NavRight"",
                    ""type"": ""Button"",
                    ""id"": ""1d3f9f4d-fd67-4e77-b282-c0c2691f3133"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""140eb6ca-a934-47d6-9dc7-a8b11d0d9ea3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5addda3b-a10f-41fd-a443-de56eb81239a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f25660d3-61cc-42a1-94f7-6d7d1df3551c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffa5f0bd-824b-48ef-a280-53241243a2a3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20372cd8-f3df-4002-bda2-2b7ce6315f80"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NavRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6026473-9f2d-4e51-9d82-4a85a95aff2c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // mainMenuControls
        m_mainMenuControls = asset.FindActionMap("mainMenuControls", throwIfNotFound: true);
        m_mainMenuControls_NavUp = m_mainMenuControls.FindAction("NavUp", throwIfNotFound: true);
        m_mainMenuControls_NavDown = m_mainMenuControls.FindAction("NavDown", throwIfNotFound: true);
        m_mainMenuControls_NavLeft = m_mainMenuControls.FindAction("NavLeft", throwIfNotFound: true);
        m_mainMenuControls_NavRight = m_mainMenuControls.FindAction("NavRight", throwIfNotFound: true);
        m_mainMenuControls_Confirm = m_mainMenuControls.FindAction("Confirm", throwIfNotFound: true);
    }

    ~@MenuControls()
    {
        UnityEngine.Debug.Assert(!m_mainMenuControls.enabled, "This will cause a leak and performance issues, MenuControls.mainMenuControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // mainMenuControls
    private readonly InputActionMap m_mainMenuControls;
    private List<IMainMenuControlsActions> m_MainMenuControlsActionsCallbackInterfaces = new List<IMainMenuControlsActions>();
    private readonly InputAction m_mainMenuControls_NavUp;
    private readonly InputAction m_mainMenuControls_NavDown;
    private readonly InputAction m_mainMenuControls_NavLeft;
    private readonly InputAction m_mainMenuControls_NavRight;
    private readonly InputAction m_mainMenuControls_Confirm;
    public struct MainMenuControlsActions
    {
        private @MenuControls m_Wrapper;
        public MainMenuControlsActions(@MenuControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NavUp => m_Wrapper.m_mainMenuControls_NavUp;
        public InputAction @NavDown => m_Wrapper.m_mainMenuControls_NavDown;
        public InputAction @NavLeft => m_Wrapper.m_mainMenuControls_NavLeft;
        public InputAction @NavRight => m_Wrapper.m_mainMenuControls_NavRight;
        public InputAction @Confirm => m_Wrapper.m_mainMenuControls_Confirm;
        public InputActionMap Get() { return m_Wrapper.m_mainMenuControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuControlsActionsCallbackInterfaces.Add(instance);
            @NavUp.started += instance.OnNavUp;
            @NavUp.performed += instance.OnNavUp;
            @NavUp.canceled += instance.OnNavUp;
            @NavDown.started += instance.OnNavDown;
            @NavDown.performed += instance.OnNavDown;
            @NavDown.canceled += instance.OnNavDown;
            @NavLeft.started += instance.OnNavLeft;
            @NavLeft.performed += instance.OnNavLeft;
            @NavLeft.canceled += instance.OnNavLeft;
            @NavRight.started += instance.OnNavRight;
            @NavRight.performed += instance.OnNavRight;
            @NavRight.canceled += instance.OnNavRight;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
        }

        private void UnregisterCallbacks(IMainMenuControlsActions instance)
        {
            @NavUp.started -= instance.OnNavUp;
            @NavUp.performed -= instance.OnNavUp;
            @NavUp.canceled -= instance.OnNavUp;
            @NavDown.started -= instance.OnNavDown;
            @NavDown.performed -= instance.OnNavDown;
            @NavDown.canceled -= instance.OnNavDown;
            @NavLeft.started -= instance.OnNavLeft;
            @NavLeft.performed -= instance.OnNavLeft;
            @NavLeft.canceled -= instance.OnNavLeft;
            @NavRight.started -= instance.OnNavRight;
            @NavRight.performed -= instance.OnNavRight;
            @NavRight.canceled -= instance.OnNavRight;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
        }

        public void RemoveCallbacks(IMainMenuControlsActions instance)
        {
            if (m_Wrapper.m_MainMenuControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuControlsActions @mainMenuControls => new MainMenuControlsActions(this);
    public interface IMainMenuControlsActions
    {
        void OnNavUp(InputAction.CallbackContext context);
        void OnNavDown(InputAction.CallbackContext context);
        void OnNavLeft(InputAction.CallbackContext context);
        void OnNavRight(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
    }
}

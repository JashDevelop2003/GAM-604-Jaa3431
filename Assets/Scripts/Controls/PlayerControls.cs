//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""boardControls"",
            ""id"": ""4a412f9b-1389-4729-a7a3-28263c7aa1cb"",
            ""actions"": [
                {
                    ""name"": ""SelectUp"",
                    ""type"": ""Button"",
                    ""id"": ""9a6b960a-946d-4e63-830d-d313267a42a6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectDown"",
                    ""type"": ""Button"",
                    ""id"": ""42b2ec4c-1b39-49cf-b6ca-b50d0cf13acb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectRight"",
                    ""type"": ""Button"",
                    ""id"": ""adc6ca47-5712-4b7a-9c8e-fe286c0f0bad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ecbe1cb3-5d5c-4fdf-a459-debfe3f6c039"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""786ddf71-8f82-44cd-8335-3047ea6093c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""4b8fbd4a-de7a-4305-a5f0-a7fcf56bd4bb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DefendUp"",
                    ""type"": ""Button"",
                    ""id"": ""70afe7d6-ca03-491b-9092-42b66aef27f3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DefendDown"",
                    ""type"": ""Button"",
                    ""id"": ""ec3419cb-0e39-4f2a-a509-c241164e7876"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DefendLeft"",
                    ""type"": ""Button"",
                    ""id"": ""e88424a0-97b9-406e-92d9-ada559883c46"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DefendRight"",
                    ""type"": ""Button"",
                    ""id"": ""5b422bf9-f6cc-4d04-9488-ebba10136885"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DefendConfirm"",
                    ""type"": ""Button"",
                    ""id"": ""ae51eef8-3f23-4088-a2bd-07737772b42f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1db7a9be-5016-461c-ac49-56e13b2dafad"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69c786df-8678-4a94-8347-060cbc0a947b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""459ed4c0-323a-4cfa-a3f5-6f5f5d9835bb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2432ad1-1e0c-47ef-8aae-814e002db040"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b093885-9a78-4cb0-b79c-8876636cf031"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""515a415d-3b0d-4767-9623-9cd7783f9224"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdae602a-cdc9-4d22-a9b2-ada388181f58"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DefendUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab83442f-f4f8-4396-ac25-ddd405dd377c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DefendDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19f641ff-4508-4357-a5ac-20c1da86a15d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DefendLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c20dd4e-e188-4895-827f-ea73f4694ec0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DefendRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e9fefed-28b3-4b2b-a562-1b2a81a99261"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DefendConfirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // boardControls
        m_boardControls = asset.FindActionMap("boardControls", throwIfNotFound: true);
        m_boardControls_SelectUp = m_boardControls.FindAction("SelectUp", throwIfNotFound: true);
        m_boardControls_SelectDown = m_boardControls.FindAction("SelectDown", throwIfNotFound: true);
        m_boardControls_SelectRight = m_boardControls.FindAction("SelectRight", throwIfNotFound: true);
        m_boardControls_SelectLeft = m_boardControls.FindAction("SelectLeft", throwIfNotFound: true);
        m_boardControls_Confirm = m_boardControls.FindAction("Confirm", throwIfNotFound: true);
        m_boardControls_Cancel = m_boardControls.FindAction("Cancel", throwIfNotFound: true);
        m_boardControls_DefendUp = m_boardControls.FindAction("DefendUp", throwIfNotFound: true);
        m_boardControls_DefendDown = m_boardControls.FindAction("DefendDown", throwIfNotFound: true);
        m_boardControls_DefendLeft = m_boardControls.FindAction("DefendLeft", throwIfNotFound: true);
        m_boardControls_DefendRight = m_boardControls.FindAction("DefendRight", throwIfNotFound: true);
        m_boardControls_DefendConfirm = m_boardControls.FindAction("DefendConfirm", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_boardControls.enabled, "This will cause a leak and performance issues, PlayerControls.boardControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // boardControls
    private readonly InputActionMap m_boardControls;
    private List<IBoardControlsActions> m_BoardControlsActionsCallbackInterfaces = new List<IBoardControlsActions>();
    private readonly InputAction m_boardControls_SelectUp;
    private readonly InputAction m_boardControls_SelectDown;
    private readonly InputAction m_boardControls_SelectRight;
    private readonly InputAction m_boardControls_SelectLeft;
    private readonly InputAction m_boardControls_Confirm;
    private readonly InputAction m_boardControls_Cancel;
    private readonly InputAction m_boardControls_DefendUp;
    private readonly InputAction m_boardControls_DefendDown;
    private readonly InputAction m_boardControls_DefendLeft;
    private readonly InputAction m_boardControls_DefendRight;
    private readonly InputAction m_boardControls_DefendConfirm;
    public struct BoardControlsActions
    {
        private @PlayerControls m_Wrapper;
        public BoardControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectUp => m_Wrapper.m_boardControls_SelectUp;
        public InputAction @SelectDown => m_Wrapper.m_boardControls_SelectDown;
        public InputAction @SelectRight => m_Wrapper.m_boardControls_SelectRight;
        public InputAction @SelectLeft => m_Wrapper.m_boardControls_SelectLeft;
        public InputAction @Confirm => m_Wrapper.m_boardControls_Confirm;
        public InputAction @Cancel => m_Wrapper.m_boardControls_Cancel;
        public InputAction @DefendUp => m_Wrapper.m_boardControls_DefendUp;
        public InputAction @DefendDown => m_Wrapper.m_boardControls_DefendDown;
        public InputAction @DefendLeft => m_Wrapper.m_boardControls_DefendLeft;
        public InputAction @DefendRight => m_Wrapper.m_boardControls_DefendRight;
        public InputAction @DefendConfirm => m_Wrapper.m_boardControls_DefendConfirm;
        public InputActionMap Get() { return m_Wrapper.m_boardControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoardControlsActions set) { return set.Get(); }
        public void AddCallbacks(IBoardControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_BoardControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BoardControlsActionsCallbackInterfaces.Add(instance);
            @SelectUp.started += instance.OnSelectUp;
            @SelectUp.performed += instance.OnSelectUp;
            @SelectUp.canceled += instance.OnSelectUp;
            @SelectDown.started += instance.OnSelectDown;
            @SelectDown.performed += instance.OnSelectDown;
            @SelectDown.canceled += instance.OnSelectDown;
            @SelectRight.started += instance.OnSelectRight;
            @SelectRight.performed += instance.OnSelectRight;
            @SelectRight.canceled += instance.OnSelectRight;
            @SelectLeft.started += instance.OnSelectLeft;
            @SelectLeft.performed += instance.OnSelectLeft;
            @SelectLeft.canceled += instance.OnSelectLeft;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @DefendUp.started += instance.OnDefendUp;
            @DefendUp.performed += instance.OnDefendUp;
            @DefendUp.canceled += instance.OnDefendUp;
            @DefendDown.started += instance.OnDefendDown;
            @DefendDown.performed += instance.OnDefendDown;
            @DefendDown.canceled += instance.OnDefendDown;
            @DefendLeft.started += instance.OnDefendLeft;
            @DefendLeft.performed += instance.OnDefendLeft;
            @DefendLeft.canceled += instance.OnDefendLeft;
            @DefendRight.started += instance.OnDefendRight;
            @DefendRight.performed += instance.OnDefendRight;
            @DefendRight.canceled += instance.OnDefendRight;
            @DefendConfirm.started += instance.OnDefendConfirm;
            @DefendConfirm.performed += instance.OnDefendConfirm;
            @DefendConfirm.canceled += instance.OnDefendConfirm;
        }

        private void UnregisterCallbacks(IBoardControlsActions instance)
        {
            @SelectUp.started -= instance.OnSelectUp;
            @SelectUp.performed -= instance.OnSelectUp;
            @SelectUp.canceled -= instance.OnSelectUp;
            @SelectDown.started -= instance.OnSelectDown;
            @SelectDown.performed -= instance.OnSelectDown;
            @SelectDown.canceled -= instance.OnSelectDown;
            @SelectRight.started -= instance.OnSelectRight;
            @SelectRight.performed -= instance.OnSelectRight;
            @SelectRight.canceled -= instance.OnSelectRight;
            @SelectLeft.started -= instance.OnSelectLeft;
            @SelectLeft.performed -= instance.OnSelectLeft;
            @SelectLeft.canceled -= instance.OnSelectLeft;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @DefendUp.started -= instance.OnDefendUp;
            @DefendUp.performed -= instance.OnDefendUp;
            @DefendUp.canceled -= instance.OnDefendUp;
            @DefendDown.started -= instance.OnDefendDown;
            @DefendDown.performed -= instance.OnDefendDown;
            @DefendDown.canceled -= instance.OnDefendDown;
            @DefendLeft.started -= instance.OnDefendLeft;
            @DefendLeft.performed -= instance.OnDefendLeft;
            @DefendLeft.canceled -= instance.OnDefendLeft;
            @DefendRight.started -= instance.OnDefendRight;
            @DefendRight.performed -= instance.OnDefendRight;
            @DefendRight.canceled -= instance.OnDefendRight;
            @DefendConfirm.started -= instance.OnDefendConfirm;
            @DefendConfirm.performed -= instance.OnDefendConfirm;
            @DefendConfirm.canceled -= instance.OnDefendConfirm;
        }

        public void RemoveCallbacks(IBoardControlsActions instance)
        {
            if (m_Wrapper.m_BoardControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBoardControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_BoardControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BoardControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BoardControlsActions @boardControls => new BoardControlsActions(this);
    public interface IBoardControlsActions
    {
        void OnSelectUp(InputAction.CallbackContext context);
        void OnSelectDown(InputAction.CallbackContext context);
        void OnSelectRight(InputAction.CallbackContext context);
        void OnSelectLeft(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnDefendUp(InputAction.CallbackContext context);
        void OnDefendDown(InputAction.CallbackContext context);
        void OnDefendLeft(InputAction.CallbackContext context);
        void OnDefendRight(InputAction.CallbackContext context);
        void OnDefendConfirm(InputAction.CallbackContext context);
    }
}

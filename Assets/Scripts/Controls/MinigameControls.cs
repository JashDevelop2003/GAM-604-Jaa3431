//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Controls/MinigameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MinigameControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MinigameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MinigameControls"",
    ""maps"": [
        {
            ""name"": ""GameControls"",
            ""id"": ""3ea76960-fe29-4bea-914b-28f4d44a5882"",
            ""actions"": [
                {
                    ""name"": ""ChooseUp"",
                    ""type"": ""Button"",
                    ""id"": ""c15f2cbe-c166-4210-a9b5-c4be232dd922"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseDown"",
                    ""type"": ""Button"",
                    ""id"": ""d8d570c7-fb07-453f-a7ff-a601426b9178"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseLeft"",
                    ""type"": ""Button"",
                    ""id"": ""9a8c8281-a3e3-437a-b953-6d03464eaaf0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChooseRight"",
                    ""type"": ""Button"",
                    ""id"": ""442c6935-4b3a-4b9d-a997-61c23da5d069"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmChoice"",
                    ""type"": ""Button"",
                    ""id"": ""e491e3c8-0838-4644-bdae-f825cdb80916"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rules"",
                    ""type"": ""Button"",
                    ""id"": ""43e0d6c0-7aa8-4677-80ce-b0b9eb15cd6c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9693552-62f0-43db-8b3a-f345668b3c15"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07227ed0-9863-4f16-b5ce-10342f1535b6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6e0f5c1-43f5-47fc-96dd-cb66a6733276"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3125dbf0-fd66-4231-bd7f-2ca3ec9b7394"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChooseRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f3400c4-d86b-4388-91d2-5eb0b0e08f88"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmChoice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a4c39f8-9ca8-4e95-b77e-81fc3368bff5"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rules"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameControls
        m_GameControls = asset.FindActionMap("GameControls", throwIfNotFound: true);
        m_GameControls_ChooseUp = m_GameControls.FindAction("ChooseUp", throwIfNotFound: true);
        m_GameControls_ChooseDown = m_GameControls.FindAction("ChooseDown", throwIfNotFound: true);
        m_GameControls_ChooseLeft = m_GameControls.FindAction("ChooseLeft", throwIfNotFound: true);
        m_GameControls_ChooseRight = m_GameControls.FindAction("ChooseRight", throwIfNotFound: true);
        m_GameControls_ConfirmChoice = m_GameControls.FindAction("ConfirmChoice", throwIfNotFound: true);
        m_GameControls_Rules = m_GameControls.FindAction("Rules", throwIfNotFound: true);
    }

    ~@MinigameControls()
    {
        UnityEngine.Debug.Assert(!m_GameControls.enabled, "This will cause a leak and performance issues, MinigameControls.GameControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameControls
    private readonly InputActionMap m_GameControls;
    private List<IGameControlsActions> m_GameControlsActionsCallbackInterfaces = new List<IGameControlsActions>();
    private readonly InputAction m_GameControls_ChooseUp;
    private readonly InputAction m_GameControls_ChooseDown;
    private readonly InputAction m_GameControls_ChooseLeft;
    private readonly InputAction m_GameControls_ChooseRight;
    private readonly InputAction m_GameControls_ConfirmChoice;
    private readonly InputAction m_GameControls_Rules;
    public struct GameControlsActions
    {
        private @MinigameControls m_Wrapper;
        public GameControlsActions(@MinigameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChooseUp => m_Wrapper.m_GameControls_ChooseUp;
        public InputAction @ChooseDown => m_Wrapper.m_GameControls_ChooseDown;
        public InputAction @ChooseLeft => m_Wrapper.m_GameControls_ChooseLeft;
        public InputAction @ChooseRight => m_Wrapper.m_GameControls_ChooseRight;
        public InputAction @ConfirmChoice => m_Wrapper.m_GameControls_ConfirmChoice;
        public InputAction @Rules => m_Wrapper.m_GameControls_Rules;
        public InputActionMap Get() { return m_Wrapper.m_GameControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameControlsActions set) { return set.Get(); }
        public void AddCallbacks(IGameControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameControlsActionsCallbackInterfaces.Add(instance);
            @ChooseUp.started += instance.OnChooseUp;
            @ChooseUp.performed += instance.OnChooseUp;
            @ChooseUp.canceled += instance.OnChooseUp;
            @ChooseDown.started += instance.OnChooseDown;
            @ChooseDown.performed += instance.OnChooseDown;
            @ChooseDown.canceled += instance.OnChooseDown;
            @ChooseLeft.started += instance.OnChooseLeft;
            @ChooseLeft.performed += instance.OnChooseLeft;
            @ChooseLeft.canceled += instance.OnChooseLeft;
            @ChooseRight.started += instance.OnChooseRight;
            @ChooseRight.performed += instance.OnChooseRight;
            @ChooseRight.canceled += instance.OnChooseRight;
            @ConfirmChoice.started += instance.OnConfirmChoice;
            @ConfirmChoice.performed += instance.OnConfirmChoice;
            @ConfirmChoice.canceled += instance.OnConfirmChoice;
            @Rules.started += instance.OnRules;
            @Rules.performed += instance.OnRules;
            @Rules.canceled += instance.OnRules;
        }

        private void UnregisterCallbacks(IGameControlsActions instance)
        {
            @ChooseUp.started -= instance.OnChooseUp;
            @ChooseUp.performed -= instance.OnChooseUp;
            @ChooseUp.canceled -= instance.OnChooseUp;
            @ChooseDown.started -= instance.OnChooseDown;
            @ChooseDown.performed -= instance.OnChooseDown;
            @ChooseDown.canceled -= instance.OnChooseDown;
            @ChooseLeft.started -= instance.OnChooseLeft;
            @ChooseLeft.performed -= instance.OnChooseLeft;
            @ChooseLeft.canceled -= instance.OnChooseLeft;
            @ChooseRight.started -= instance.OnChooseRight;
            @ChooseRight.performed -= instance.OnChooseRight;
            @ChooseRight.canceled -= instance.OnChooseRight;
            @ConfirmChoice.started -= instance.OnConfirmChoice;
            @ConfirmChoice.performed -= instance.OnConfirmChoice;
            @ConfirmChoice.canceled -= instance.OnConfirmChoice;
            @Rules.started -= instance.OnRules;
            @Rules.performed -= instance.OnRules;
            @Rules.canceled -= instance.OnRules;
        }

        public void RemoveCallbacks(IGameControlsActions instance)
        {
            if (m_Wrapper.m_GameControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameControlsActions @GameControls => new GameControlsActions(this);
    public interface IGameControlsActions
    {
        void OnChooseUp(InputAction.CallbackContext context);
        void OnChooseDown(InputAction.CallbackContext context);
        void OnChooseLeft(InputAction.CallbackContext context);
        void OnChooseRight(InputAction.CallbackContext context);
        void OnConfirmChoice(InputAction.CallbackContext context);
        void OnRules(InputAction.CallbackContext context);
    }
}
